{"version":3,"sources":["handsomeOrDie/reducers/setTheme.js","handsomeOrDie/constants/ActionTypes.js","common/store/reducerIndex.js","common/store/index.js","handsomeOrDie/pages/home/index.js","common/routes/Routes.js","handsomeOrDie/utils/history.js","handsomeOrDie/App.js","handsomeOrDie/utils/serviceWorker.js","index.js"],"names":["initialState","themeReducer","state","arguments","length","undefined","action","type","Object","objectSpread","theme","payload","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","HomePage","tradeType","react_default","a","createElement","style","textAlign","marginTop","React","Component","connect","dispatch","Routes","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","layout","Switch","Route","exact","path","component","Home","withRouter","history","createBrowserHistory","App","react_redux_es","Router","className","routes_Routes","Boolean","location","hostname","match","ReactDOM","render","handsomeOrDie_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAEMA,EAAe,GAaNC,EAZM,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACf,ICJqB,YDKjB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIQ,MAAOJ,EAAOK,UAGtB,QACI,OAAOT,IEJAU,EALKC,YAAgB,CAEhCZ,yBCIEa,EAAmBC,OAAOC,sCAAwCC,IAezDC,MAdDC,YACVC,EAEAN,EAAiBO,YAAgBC,kDCX/BC,6MACFrB,MAAQ,CACJsB,UAAW,+EAIX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACC,UAAW,SAASC,UAAW,MAA3C,wBAROC,IAAMC,WAqBdC,cAPS,SAAA/B,GAAK,MAAK,IAIP,SAAAgC,GAAQ,MAAK,IAGzBD,CAA4CV,GClBrDY,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAJ,IACfE,EAAA7B,OAAAgC,EAAA,EAAAhC,CAAA+B,KAAA/B,OAAAiC,EAAA,EAAAjC,CAAA2B,GAAAO,KAAAH,KAAMH,KACDlC,MAAQ,GAFEmC,wEAOf,OACIZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,aAZhCjB,aAyBNkB,cAAWjB,YANF,SAAA/B,GAAK,MAAK,IAGP,SAAAgC,GAAQ,MAAK,IAGdD,CAA6CE,YC5BxDgB,EADCC,uBCmBDC,mLAXP,OACI5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUpC,MAAOA,GACbO,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQJ,QAASA,GACb1B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACX/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAQlD,KAAMgC,KAAKH,MAAM7B,iBAN/ByB,aCKE0B,QACa,cAA7B3C,OAAO4C,SAASC,UAEa,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACrB,kECXRC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.240198ef.chunk.js","sourcesContent":["import * as ActionTypes from \"../constants/ActionTypes\";\n\nconst initialState = {};\nconst themeReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case ActionTypes.SET_THEME:\n        return {\n            ...state,\n            theme: action.payload,\n        };\n   \n    default:\n        return state;\n    }\n};\nexport default themeReducer;","\nexport const SET_THEME = \"SET_THEME\";\n","import { combineReducers } from \"redux\";\n\nimport themeReducer from \"../../handsomeOrDie/reducers/setTheme\";\nconst rootReducer = combineReducers({\n    // TODO\n    themeReducer\n});\n\nexport default rootReducer;\n","import reducer from \"./reducerIndex\";\nimport {applyMiddleware, createStore, compose} from \"redux\";\n// import {createLogger} from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\n// const logger = createLogger({\n//     collapsed: true,\n// });\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducer,\n    // composeEnhancers(applyMiddleware(thunk, logger)),\n    composeEnhancers(applyMiddleware(thunk)),\n);\n\nif (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept(\"./reducerIndex\", () => {\n        const nextRootReducer = require(\"./reducerIndex\");\n        store.replaceReducer(nextRootReducer);\n    });\n}\n\nexport default store;","import React from \"react\";\nimport { connect } from \"react-redux\";\nclass HomePage extends React.Component{\n    state = {\n        tradeType: \"ODM\",\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 style={{textAlign: \"center\",marginTop: 200}}>Hello Frank!</h1>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n    \n});\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, withRouter } from \"react-router\";\nimport { Layout } from \"antd\";\nimport Home from \"../../handsomeOrDie/pages/home\";\nclass Routes extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                </Switch>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n});\n\nconst mapDispatchToProps = dispatch => ({\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Routes));\n","import { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nexport default history;\n","import store from \"../common/store\";\nimport Routes from \"../common/routes/Routes\";\nimport history from \"./utils/history\";\nimport { Provider } from \"react-redux\";\nimport React, { Component } from \"react\";\nimport { Router } from \"react-router-dom\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Router history={history}>\n                    <div className=\"container\">\n                        <Routes type={this.props.type} />\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./handsomeOrDie/App\";\nimport * as serviceWorker from \"./handsomeOrDie/utils/serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}